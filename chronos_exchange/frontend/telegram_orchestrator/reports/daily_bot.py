import asyncio
import aiohttp
from datetime import datetime, timedelta
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

TELEGRAM_BOT_TOKEN = "6490419657:AAEY_naNgWDxEiComiVGdWFRd89JOrRSCn4"
TELEGRAM_CHAT_ID = "@Bigboss191719"

class DailyReportBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()
        
    def setup_handlers(self):
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            await message.answer("üåå –¶–∏—Ñ—Ä–∞ 2.0 + Chronos - –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            
        @self.dp.message(Command("status"))
        async def cmd_status(message: types.Message):
            status = await self.get_network_status()
            await message.answer(status, parse_mode="Markdown")
            
    async def get_network_status(self) -> str:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('http://localhost:8000/stats') as response:
                    stats = await response.json()
            return (
                "üìä *–°–¢–ê–¢–£–° –°–ï–¢–ò –¶–ò–§–†–ê + CHRONOS*\n"
                f"üìç –ë–ª–æ–∫–æ–≤: {stats['total_blocks']}\n"
                f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å AI: {stats['avg_ai_score']*100:.1f}%\n"
                f"üîó –†–∞–∑–º–µ—Ä —Å–µ—Ç–∏: {stats['cell_network_size']} —è—á–µ–µ–∫\n"
                f"üîÑ –¶–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏: {stats['evolution_cycle']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            )
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
    
    async def start_bot(self):
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.dp.start_polling(self.bot)
    
    async def stop_bot(self):
        await self.bot.close()

daily_bot = DailyReportBot()
