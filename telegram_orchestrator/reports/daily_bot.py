import asyncio
import aiohttp
from datetime import datetime, timedelta
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import sys
sys.path.append('..')
from quantum_blockchain.core.quantum_chain import quantum_blockchain
from chronos_exchange.ai_market_maker.odds_calculator import odds_calculator

TELEGRAM_BOT_TOKEN = "6490419657:AAEY_naNgWDxEiComiVGdWFRd89JOrRSCn4"
TELEGRAM_CHAT_ID = "@Bigboss191719"

class DailyReportBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()
        
    def setup_handlers(self):
        @self.dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            await message.answer("üåå –¶–∏—Ñ—Ä–∞ 2.0 + Chronos - –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            
        @self.dp.message(Command("status"))
        async def cmd_status(message: types.Message):
            status = await self.get_network_status()
            await message.answer(status, parse_mode="Markdown")
            
        @self.dp.message(Command("nft"))
        async def cmd_nft(message: types.Message):
            nft_info = await self.get_daily_nft_info()
            await message.answer(nft_info, parse_mode="Markdown")
            
        @self.dp.message(Command("bet"))
        async def cmd_bet(message: types.Message):
            try:
                _, event_id, prediction, amount = message.text.split()
                amount = int(amount)
                prediction = prediction.lower() == "yes"
                user = message.from_user.username
                quantum_blockchain.place_bet(event_id, user, amount, prediction)
                odds = await odds_calculator.calculate_odds({"event_id": event_id})
                await message.answer(
                    f"‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
                    f"–°–æ–±—ã—Ç–∏–µ: {event_id}\n"
                    f"–ü—Ä–æ–≥–Ω–æ–∑: {'YES' if prediction else 'NO'}\n"
                    f"–°—É–º–º–∞: {amount} TRUTH\n"
                    f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: YES {odds['yes_odds']}x, NO {odds['no_odds']}x",
                    parse_mode="Markdown"
                )
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", parse_mode="Markdown")
    
    async def get_network_status(self) -> str:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('http://localhost:8000/stats') as response:
                    stats = await response.json()
            return (
                "üìä *–°–¢–ê–¢–£–° –°–ï–¢–ò –¶–ò–§–†–ê + CHRONOS*\n"
                f"üìç –ë–ª–æ–∫–æ–≤: {stats['total_blocks']}\n"
                f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å AI: {stats['avg_ai_score']*100:.1f}%\n"
                f"üîó –†–∞–∑–º–µ—Ä —Å–µ—Ç–∏: {stats['cell_network_size']} —è—á–µ–µ–∫\n"
                f"üîÑ –¶–∏–∫–ª —ç–≤–æ–ª—é—Ü–∏–∏: {stats['evolution_cycle']}\n"
                f"üñºÔ∏è NFT —Å–æ–∑–¥–∞–Ω–æ: {stats['listed_nfts']}\n"
                f"üìà –†—ã–Ω–∫–æ–≤ Chronos: {len(quantum_blockchain.prediction_markets)}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
            )
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
    
    async def get_daily_nft_info(self) -> str:
        nft_storage = Path("storage/nfts/daily")
        if not nft_storage.exists():
            return "üé® Daily NFT –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω"
        nft_files = list(nft_storage.glob("nft_daily_*.png"))
        if not nft_files:
            return "üé® Daily NFT –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω"
        latest_nft = max(nft_files, key=lambda x: x.stat().st_mtime)
        metadata_file = nft_storage / f"metadata_{latest_nft.stem.split('_')[-1]}.json"
        if metadata_file.exists():
            with open(metadata_file, 'r') as f:
                metadata = json.load(f)
            return (
                "üñºÔ∏è *–ü–û–°–õ–ï–î–ù–ò–ô DAILY NFT*\n"
                f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {metadata['name']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {metadata['description']}\n"
                f"üîÑ –ê—Ç—Ä–∏–±—É—Ç—ã:\n"
                f"   - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {metadata['attributes'][0]['value']}\n"
                f"   - –°–æ–±—ã—Ç–∏–µ: {metadata['attributes'][1]['value']}\n"
                f"   - –¶–∏—Ñ—Ä–∞: {metadata['attributes'][2]['value']}\n"
                f"‚è∞ –°–æ–∑–¥–∞–Ω: {metadata['created_at']}"
            )
        return f"üé® NFT —Å–æ–∑–¥–∞–Ω: {latest_nft.name}"
    
    async def send_daily_report(self):
        try:
            status_report = await self.get_network_status()
            nft_report = await self.get_daily_nft_info()
            report = (
                "üåå *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –¶–ò–§–†–ê + CHRONOS*\n"
                "=============================\n"
                f"{status_report}\n\n"
                f"{nft_report}\n\n"
                f"üìÖ {datetime.now().strftime('%Y-%m-%d')}"
            )
            await self.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=report, parse_mode="Markdown")
            print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def start_bot(self):
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        await self.dp.start_polling(self.bot)
    
    async def stop_bot(self):
        await self.bot.close()

daily_bot = DailyReportBot()
